// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: qprocess.sql

package db

import (
	"context"
	"time"
)

const batchGet = `-- name: BatchGet :many
SELECT
    id,
    due_date
FROM queue
WHERE
    processed_count = 0
AND due_date < now()
ORDER BY
    due_date ASC
LIMIT
    $1::integer
for update skip locked
`

type BatchGetRow struct {
	ID      int32     `json:"id"`
	DueDate time.Time `json:"due_date"`
}

func (q *Queries) BatchGet(ctx context.Context, dollar_1 int32) ([]*BatchGetRow, error) {
	rows, err := q.db.Query(ctx, batchGet, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*BatchGetRow
	for rows.Next() {
		var i BatchGetRow
		if err := rows.Scan(&i.ID, &i.DueDate); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

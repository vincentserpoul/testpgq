// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: batch.go
package db

import (
	"context"

	"github.com/jackc/pgx/v4"
)

const setProcessed = `-- name: SetProcessed :batchexec
UPDATE
    queue
SET
    processed_count = processed_count+1
WHERE
    id = $1::integer
`

type SetProcessedBatchResults struct {
	br  pgx.BatchResults
	ind int
}

func (q *Queries) SetProcessed(ctx context.Context, dollar_1 []int32) *SetProcessedBatchResults {
	batch := &pgx.Batch{}
	for _, a := range dollar_1 {
		vals := []interface{}{
			a,
		}
		batch.Queue(setProcessed, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &SetProcessedBatchResults{br, 0}
}

func (b *SetProcessedBatchResults) Exec(f func(int, error)) {
	for {
		_, err := b.br.Exec()
		if err != nil && (err.Error() == "no result" || err.Error() == "batch already closed") {
			break
		}
		if f != nil {
			f(b.ind, err)
		}
		b.ind++
	}
}

func (b *SetProcessedBatchResults) Close() error {
	return b.br.Close()
}
